const solver = require('./day-18');

const EXPLODE_TESTS = [
  {
    input: '[[[[[9,8],1],2],3],4]',
    expected: '[[[[0,9],2],3],4]',
  },
  {
    input: '[7,[6,[5,[4,[3,2]]]]]',
    expected: '[7,[6,[5,[7,0]]]]',
  },
  {
    input: '[[6,[5,[4,[3,2]]]],1]',
    expected: '[[6,[5,[7,0]]],3]',
  },
  {
    input: '[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]',
    expected: '[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]',
  },
  {
    input: '[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]',
    expected: '[[3,[2,[8,0]]],[9,[5,[7,0]]]]',
  },
];

const ADDITION_TESTS = [
  {
    terms: [
      '[1,2]',
      '[[3,4],5]',
    ],
    expected: '[[1,2],[[3,4],5]]',
  },
  {
    terms: [
      '[[[[4,3],4],4],[7,[[8,4],9]]]',
      '[1,1]',
    ],
    expected: '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]',
  },
  {
    terms: [
      '[1,1]',
      '[2,2]',
      '[3,3]',
      '[4,4]',
    ],
    expected: '[[[[1,1],[2,2]],[3,3]],[4,4]]',
  },
  {
    terms: [
      '[1,1]',
      '[2,2]',
      '[3,3]',
      '[4,4]',
      '[5,5]',
    ],
    expected: '[[[[3,0],[5,3]],[4,4]],[5,5]]',
  },
  {
    terms: [
      '[1,1]',
      '[2,2]',
      '[3,3]',
      '[4,4]',
      '[5,5]',
      '[6,6]',
    ],
    expected: '[[[[5,0],[7,4]],[5,5]],[6,6]]',
  },
  {
    terms: [
      '[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]',
      '[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]',
      '[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]',
      '[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]',
      '[7,[5,[[3,8],[1,4]]]]',
      '[[2,[2,2]],[8,[8,1]]]',
      '[2,9]',
      '[1,[[[9,3],9],[[9,0],[0,7]]]]',
      '[[[5,[7,4]],7],1]',
      '[[[[4,2],2],6],[8,7]]',
    ],
    expected: '[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]',
  },
  {
    terms: [
      '[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]',
      '[[[5,[2,8]],4],[5,[[9,9],0]]]',
      '[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]',
      '[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]',
      '[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]',
      '[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]',
      '[[[[5,4],[7,7]],8],[[8,3],8]]',
      '[[9,3],[[9,9],[6,[4,9]]]]',
      '[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]',
      '[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]',
    ],
    expected: '[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]',
  },
];

const MAGNITUDE_TESTS = [
  {
    input: '[9,1]',
    expected: 29,
  },
  {
    input: '[1,9]',
    expected: 21,
  },
  {
    input: '[[9,1],[1,9]]',
    expected: 129,
  },
  {
    input: '[[1,2],[[3,4],5]]',
    expected: 143,
  },
  {
    input: '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]',
    expected: 1384,
  },
  {
    input: '[[[[1,1],[2,2]],[3,3]],[4,4]]',
    expected: 445,
  },
  {
    input: '[[[[3,0],[5,3]],[4,4]],[5,5]]',
    expected: 791,
  },
  {
    input: '[[[[5,0],[7,4]],[5,5]],[6,6]]',
    expected: 1137,
  },
  {
    input: '[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]',
    expected: 3488,
  },
  {
    input: '[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]',
    expected: 4140,
  },
];

describe('Day 18', () => {
  test('Parse', () => {
    const input = '[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]';
    const parsed = solver.parseLine(input);
    expect(JSON.stringify(parsed)).toBe(input);
  });

  test.each(ADDITION_TESTS)('Add', entry => {
    const numbers = entry.terms.map(solver.parseLine);
    const result = solver.add(numbers);
    expect(JSON.stringify(result)).toBe(entry.expected);
  });

  test.each(EXPLODE_TESTS)('Explode', entry => {
    const number = solver.parseLine(entry.input);
    expect(solver.explode(number)).toBe(true);
    expect(JSON.stringify(number)).toBe(entry.expected);
  });

  test.each(MAGNITUDE_TESTS)('Magnitude', entry => {
    const number = solver.parseLine(entry.input);
    expect(solver.magnitude(number)).toBe(entry.expected);
  });
});
